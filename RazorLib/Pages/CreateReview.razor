@using Microsoft.AspNetCore.Components.Forms
@using ModelLib.DTOs.Reviews
@using RazorLib.Interfaces
@using static EntityLib.Entities.Enums
@inject IApiClient ApiClient

<MudContainer>

    <MudText Typo="Typo.h5" Align="Align.Center">@_titlePrefix your review of</MudText>

    <MudText Typo="Typo.h5" Align="Align.Center">"@RevieweeName"</MudText>

    <EditForm Model="@_model" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.body2">Rating</MudText>
                        <MudRating Label="Title" MaxValue="5" Size="Size.Large" @bind-SelectedValue="_model.Rating">
                            Rating
                        </MudRating>
                        <MudTextField Label="Title" HelperText="Short summary of your experience"
                                      @bind-Value="_model.Title" For="@(() => _model.Title)" />
                        <MudTextField Lines="5" Label="Description" HelperText="How was your experience?"
                                      @bind-Value="_model.Description" For="@(() => _model.Description)" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Disabled=@_loading FullWidth=true ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                            @if(_loading)
                            {
                                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                            }else {
                                 <span>Submit</span>
                            }
                            </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudContainer>

@code {

    [Parameter]
    public ReviewType ReviewType { get; set; }

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string RevieweeName { get; set; }

    [Parameter]
    public Action OnReviewCreated { get; set; }

    [Parameter]
    public bool IsReviewUpdate { get; set; }

    private ReviewCreateDTO _model = new();

    private bool _loading;
    private string _titlePrefix;

    protected override void OnInitialized()
    {
        _titlePrefix = IsReviewUpdate ? "Update" : "Write";
    }

    public async Task OnSubmit()
    {
        _loading = true;
        _model.RevieweeId = Id;
        await ApiClient.CreateReview(ReviewType.DogPark, _model);
        _loading = false;
        OnReviewCreated();
    }

    
}
