@page "/"
@attribute [Route(RoutingConstants.DISCOVER + "{FacilityTypeString}")]
@using FisSst.BlazorMaps.Models.Basics
@using ModelLib.DTOs
@using ModelLib.DTOs.Places
@using RazorLib.Models.MapSearch
@using static EntityLib.Entities.Enums
@inject InstructorMapSearcher InstructorMapSearcher

@using static EntityLib.Entities.Enums

@DiscoverContent

@code {

    [Parameter, EditorRequired]
    public PlaceType FacilityType { get; set; }

    [Parameter]
    public string? FacilityTypeString { get; set; }

    private RenderFragment DiscoverContent;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var _facilityType = EntityLib.Entities.Enums.PlaceType.DogInstructor;
        if (FacilityTypeString is not null)
        {
            _facilityType = Enum.Parse<PlaceType>(FacilityTypeString);
        }

        switch (_facilityType)
        {
            case PlaceType.DogInstructor:
                DiscoverContent = @<RazorLib.Components.Discover.DiscoverInstructors MapSearchHeaderText="Find Hundetrænere"/>;
                break;
            case PlaceType.DogPark:
                DiscoverContent = @<RazorLib.Components.Discover.DiscoverDogParks MapSearchHeaderText="Find Hundeparker"/>;
                break;
            default:
                throw new Exception($"{FacilityType} has no switch case");
        }

    }
}
