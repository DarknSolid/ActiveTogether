@attribute [Route(RoutingConstants.INSTRUCTOR + "{InstructorId:int}")]
@attribute [Route(RoutingConstants.ENTERPRISE_HOME)]

@using Microsoft.JSInterop;
@using ModelLib.DTOs.Authentication;
@using ModelLib.DTOs.Instructors
@using ModelLib.DTOs.Posts;
@using RazorLib.Components
@using RazorLib.Components.Instructors
@using RazorLib.Components.ListViews
@using RazorLib.Components.Maps
@using RazorLib.Components.Posts
@using RazorLib.Components.Ratings
@using RazorLib.Components.Users;
@using RazorLib.Interfaces
@using RazorLib.Utils;
@using static EntityLib.Entities.Enums;
@using static ModelLib.DTOEnums;
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inherits UserContext

@if (!_loading)
{
    <MudBreakpointProvider OnBreakpointChanged="(Breakpoint b) => _isMobile = b <= Breakpoint.Sm" />


    <MediaPopup Url="@_instructor.CoverImgUrl">
        <CoverImage Class="mb-5" Height="300" Url="@_instructor.CoverImgUrl" />
    </MediaPopup>

    <MudGrid Class="mb-5">
        <MudItem xs="12" sm="12" md="3" Style="position:relative; height:100px;">
            <MediaPopup Url=@_instructor.ProfileImgUrl>
                <MudPaper Elevation="5" Style="height:150px; width:150px; border-radius: 50%; position:absolute; left:50%; bottom:50%; transform: translate(-50%,25%); z-index:1;">
                    <MudImage ObjectFit="ObjectFit.Cover" Src="@_instructor.ProfileImgUrl" Style="height:100%; width:100%; border-radius: 50%;" />
                </MudPaper>
            </MediaPopup>
        </MudItem>

        <MudItem xs="12" sm="12" md="6">

            <MudGrid>
                <MudItem xs="12" Class="pb-0">
                    <MudStack AlignItems="@(_isMobile ? AlignItems.Center : AlignItems.Start)">
                        <MudText Typo="Typo.h5">@_instructor.Name</MudText>
                    </MudStack>
                </MudItem>

                <MudItem xs="12" Class="pt-0">
                    <MudStack Row="true" Spacing="2" Justify="@(_isMobile ? Justify.Center : Justify.FlexStart)">
                        <MudStack Row="false" Justify="Justify.Center" AlignItems="@(_isMobile ? AlignItems.Center : AlignItems.Start)">
                            <RatingReadOnly PlaceId="InstructorId" Rating="_rating" RatingCount="@_instructor.RatingCount" />
                            @if (!_isUserOwner)
                            {
                                <Authenticated>
                                    <MudButton Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.RateReview"
                                               Variant="Variant.Filled"
                                               OnClick="OnReviewButtonClicked">
                                        @(_instructor.CurrentReviewStatus == ReviewStatus.CanUpdateReview ? "Opdater Anmeldelse" : "Giv Anmeldelse")
                                    </MudButton>
                                </Authenticated>
                            }
                        </MudStack>
                    </MudStack>
                </MudItem>

                <MudItem xs="12" Class="pt-0">
                    <MudStack Row="true" Justify="@(_isMobile ? Justify.Center : Justify.FlexStart)" Style="flex-wrap:wrap;">
                        <MudIcon Icon="@Icons.Material.Filled.School" />
                        @foreach (var category in _instructor.Categories)
                        {
                            <MudText Align="Align.Center" Typo="Typo.subtitle2">@category</MudText>
                        }
                    </MudStack>
                </MudItem>

            </MudGrid>

        </MudItem>

        <MudItem xs="12" md="3">
            <MudStack AlignItems="@(_isMobile ? AlignItems.Center :  AlignItems.End)" Class="@(_isMobile ? "" : "pr-5")">
                @if (_isUserOwner)
                {
                    <MudStack Style="width:fit-content;">
                        <MudButton StartIcon="@Icons.Material.Filled.Edit" Style="width:fit-content;" Variant="Variant.Outlined" OnClick="@(() => NavigationManager.NavigateToUpdateDogInstructor(InstructorId ?? AuthenticatedUser.CompanyId.Value))">
                            Rediger Profil
                        </MudButton>
                    </MudStack>
                }
                @if (_instructor.CompanyURL is not null)
                {
                    <MudButton Style="width:fit-content;" EndIcon="@Icons.Material.Filled.OpenInNew"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="(() => NavigationManager.OpenNewTab(jSRuntime: JSRuntime, url: _instructor.CompanyURL))">
                        Hjemmeside
                    </MudButton>
                }
            </MudStack>
        </MudItem>

    </MudGrid>

    <MudDivider Class="mb-5" />

    <MudContainer Style="overflow:auto;" Class="mb-5">


        <MudItem Class="mb-5">

            <MudText Typo="Typo.h6">Træner</MudText>

            <Authenticated>
                <MudPaper Class="mb-5 pa-3 mud-ripple card-clickable" Style="width:fit-content;" @onclick="() => NavigationManager.NavigateToUser(_instructor.OwnerId)">
                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                        @if (_instructor.OwnerProfilePictureUrl is not null)
                        {
                            <MudAvatar Size="Size.Large">
                                <MudImage Src="@_instructor.OwnerProfilePictureUrl" />
                            </MudAvatar>
                        }
                        else
                        {
                            <MudAvatar Color="Color.Primary">
                                @(_instructor.OwnerName.First() + "" + _instructor.OwnerName.Split(" ").Last().First())
                            </MudAvatar>
                        }
                        <MudText>@_instructor.OwnerName</MudText>
                    </MudStack>
                </MudPaper>
            </Authenticated>

            <MudStack Row="true" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.h6">Kommende Hold: @(_upcommingDogTrainings.Count())</MudText>
                    <MudButton Variant="Variant.Text" OnClick="(() => OnSeeAllClicked())" EndIcon="@Icons.Material.Filled.ArrowForward">FLERE</MudButton>

                </MudStack>
                <MudStack Row="true" Justify="Justify.FlexStart" Style="flex-wrap:wrap;">
                    @foreach (var category in _instructor.ActiveCategories)
                {
                    <MudLink Underline="Underline.Always"
                             OnClick="() => NavigationManager.NavigateToSearchDogTraining(category:category, trainerId:InstructorId)">
                        <MudText Align="Align.Center" Typo="Typo.subtitle2">@category</MudText>
                    </MudLink>
                }
            </MudStack>
            <MudDivider />
            <ListViewScrollPaginationNoFetch ItemGap="20" Orientation="ListViewOrientation.Horizontal" IsLoading=@_loading Items="@_upcommingDogTrainings.ToList()" BuildListItemContent="_buildListItemContent" />
            <MudDivider />
        </MudItem>


        <MudText Typo="Typo.h6">Beskrivelse</MudText>
        <MudCard Class="pa-5 mb-5">
            @foreach (string line in _instructor.Description.Split("\n"))
            {
                <MudText>@line</MudText>
            }
        </MudCard>


        <MudText Typo="Typo.h6">Faciliteter</MudText>
        <MudGrid Class="mb-5">
            @foreach (var facility in _instructor.Facilities)
            {
                <MudItem xs="12" md="3">
                    <MudCard Class="pa-2">
                        <MudText Align="Align.Center" Typo="Typo.subtitle1">@facility</MudText>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

        <MudText Typo="Typo.h6">Kontakt</MudText>
        <MudDivider Class="mb-2" />
        <MudGrid Class="mb-5">
            <MudItem xs="12" sm="12" md="6">
                <MudCard Class="pa-5">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.Email" />
                        <MudText Typo="Typo.subtitle1">@_instructor.Email</MudText>
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.Phone" />
                        <MudText Typo="Typo.subtitle1">@_instructor.Phone</MudText>
                    </MudStack>
                    <LocationGoogleMapsLink Latitude="_instructor.Location.Y" Longitude="_instructor.Location.X" />
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="12" md="6">
                <MudCard Class="pa-5">
                    <div style="position:relative; width:100%; height:250px;">
                        <MapStaticLocation Latitude="@(_instructor.Location.Y)" Longitude="@(_instructor.Location.X)" />
                    </div>
                </MudCard>
            </MudItem>
        </MudGrid>

        <MudStack Spacing="0">
            <MudText Typo="Typo.h6">Opslag</MudText>
            <MudDivider Class="mb-2" />

            <PostsListView HidePostArea=true CanChoosePostArea=false DefaultPostArea="@PostArea.DogTraining" CanPost=true PlaceId="@InstructorId" Filter=@(new PostFilter {PlaceId = InstructorId, IncludePlaceDetails=false}) />
        </MudStack>

    </MudContainer>
}
else
{
    <MudStack>
        <MudSkeleton Height="250px" Width="100%" Style="transform: none;" />
        <MudStack Row="true" Justify="Justify.SpaceBetween" Style="flex-wrap:wrap;">
            <MudStack Row="true" AlignItems="AlignItems.Center" Style="flex-wrap:wrap;">
                <MudSkeleton SkeletonType="SkeletonType.Circle" Height="90px" Width="90px" Style="transform: none;" />
                <MudSkeleton Width="200px" Height="50px" Style="transform: none;" />
            </MudStack>
            <MudSkeleton Width="100px" Height="50px" Style="transform: none;" />
        </MudStack>

        <MudSkeleton Width="100%" Height="600px" Style="transform: none;" />
    </MudStack>

}

@code {
    [Parameter]
    public int? InstructorId { get; set; }

    private bool _isMobile;

    private bool _loading = true;

    private bool _isUserOwner = false;

    private double _rating;

    private InstructorDetailedDTO _instructor { get; set; }

    private void OnSeeAllClicked()
    {
        NavigationManager.NavigateToSearchDogTraining(trainerId: InstructorId);
    }

    private void OnReviewButtonClicked()
    {
        if (_instructor.CurrentReviewStatus == ReviewStatus.CanUpdateReview)
        {
            NavigationManager.NavigateToReviewUpdate(InstructorId.Value, AuthenticatedUser.Id, _instructor.Name);
        }
        else
        {
            NavigationManager.NavigateToReviewCreate(InstructorId.Value, _instructor.Name);
        }
    }

    private IEnumerable<DogTrainingListDTO> _upcommingDogTrainings;
    private Func<DogTrainingListDTO, RenderFragment> _buildListItemContent;

    public DogInstructorProfile()
    {
        _upcommingDogTrainings = new List<DogTrainingListDTO>();
        _buildListItemContent = (DogTrainingListDTO dto) =>@<DogTrainingListCard DogTraining="dto" />;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await Fetch();
        if (AuthenticatedUser is not null)
        {
            _isUserOwner = AuthenticatedUser.Id == _instructor.OwnerId;
        }

        if (_instructor.Rating.HasValue)
        {
            _rating = _instructor.Rating.Value;
        }
    }

    private async Task Fetch()
    {
        _loading = true;
        _instructor = await ApiClient.GetDogInstructor(InstructorId ?? AuthenticatedUser.CompanyId.Value);
        _upcommingDogTrainings = await ApiClient.GetUpcommingDogTrainingsAsync(InstructorId ?? AuthenticatedUser.CompanyId.Value);
        _loading = false;
        StateHasChanged();
    }

}
