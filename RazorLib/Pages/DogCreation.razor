@attribute [Route(RoutingConstants.CREATE_DOG + "{DogId:int?}")]

@using EntityLib.Entities
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop;
@using ModelLib.ApiDTOs;
@using ModelLib.DTOs.Dogs
@using ModelLib;
@using RazorLib.Components.FileSelection
@using RazorLib.Interfaces
@using System.ComponentModel.DataAnnotations
@using RazorLib.Utils;
@using static EntityLib.Entities.Enums
@inject IApiClient ApiClient;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject ISnackbar Snackbar

<MudContainer>
    <MudText Typo="Typo.h5" Class="my-5" Align="Align.Center">@_title</MudText>

    <EditForm Model="@_model" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />

        <MudGrid Spacing="2" Class="justify-center">

            <MudItem xs="12">
                <ImageSelect Disabled=@_loading UploadImageText="Vælg Profilbillede"
                             ImageStyle="height: 150px; width: 150px; border-radius: 50%; background-color:white"
                             ChangeImageText="Skift Profilbillede"
                             InitialImageURL="@_initialProfilePictureUrl"
                             OnImageChanged="OnProfilePictureChanged"
                             OnImageRemoved="OnRemoveSelectedProfilePicture" />
            </MudItem>

            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-5">
                    <MudTextField Label="Navn" HelperText="Din hunds navn"
                                  @bind-Value="_model.Name" For="@(() => _model.Name)" />
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-5">
                    <MudTextField Lines="5" Label="Beskrivelse" HelperText="Fortæl os om din hund"
                                  @bind-Value="_model.Description" For="@(() => _model.Description)" />
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-5">
                    <MudSelect @bind-Value="_model.WeightClass" Label="Vægt klasse" HelperText="Hvor stor er din hund?" OpenIcon="@Icons.Filled.Scale">
                        @foreach (DogWeightClass item in Enum.GetValues(typeof(DogWeightClass)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-5">
                    <MudDatePicker Color="Color.Primary" Label="Fødselsdag" @bind-Date="_birth" />
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-5">
                <MudSelect @bind-Value="_model.IsGenderMale" Label="Køn" HelperText="Er det en hand eller hun?">
                    <MudSelectItem Value="true">
                        <MudIcon Icon="@Icons.Filled.Male" /> Han
                    </MudSelectItem>
                    <MudSelectItem Value="false">
                        <MudIcon Icon="@Icons.Filled.Female" /> Hun
                    </MudSelectItem>
                </MudSelect>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-5">
                <MudSelect @bind-Value="_model.Race" Text="Loading" Dense="true" Label="Race" Variant="Variant.Text">
                    @foreach (var race in Enum.GetValues<DogRace>())
                    {
                        <MudSelectItem Value="@race">@race.ToString()</MudSelectItem>
                    }
                </MudSelect>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="7" Class="mb-5">
                <MudButton Disabled=@_isCreatingUpdatingDog FullWidth=true ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                    @if (_isCreatingUpdatingDog)
                    {
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                    }
                    else
                    {
                        <span>@(_isUpdate ? "Opdater" : "Tilføj")</span>
                    }
                </MudButton>
            </MudItem>

            <MudOverlay Visible="_loading" DarkBackground="true" Absolute="true">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </MudOverlay>
        </MudGrid>
    </EditForm>
</MudContainer>

@code {

    [Parameter]
    public int? DogId { get; set; }

    public DogCreateDTO _model { get; set; } = new();

    private string _title;
    private bool _loading;
    private bool _isCreatingUpdatingDog;
    private bool _isUpdate;

    private string? _initialProfilePictureUrl;

    [Required(ErrorMessage = "You must specify a date")]
    private DateTime? _birth = DateTime.UtcNow;

    protected override async Task OnParametersSetAsync()
    {
        if (DogId > 0)
        {
            _isUpdate = true;
        }
        _loading = true;
        StateHasChanged();
        if (_isUpdate)
        {
            await FetchExistingDog();
            _title = "Opdater " + _model.Name;
        }
        else
        {
            _title = "Opret din Hund";
            // set default values:
            _model.WeightClass = DogWeightClass.Medium;
        }
        _loading = false;
        base.OnParametersSet();
    }

    private async Task OnProfilePictureChanged(IBrowserFile file)
    {
        if (_model.ProfilePicture is null)
        {
            _model.ProfilePicture = new();
        }
        _model.ProfilePicture.IsDeleteCommand = false;
        _model.ProfilePicture.ContentType = file.ContentType;
        _model.ProfilePicture.Bytes = await file.ToByteArray(maxAllowedSize: MediaUtils.FORTY_MEGABYTES_IN_BYTES);
    }

    private Task OnRemoveSelectedProfilePicture()
    {
        _model.ProfilePicture = new();
        _model.ProfilePicture.IsDeleteCommand = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task OnSubmit()
    {
        _isCreatingUpdatingDog = true;
        var success = false;
        int? id = null;
        if (_isUpdate)
        {
            success = await ApiClient.UpdateDogAsync(new DogUpdateDTO
                {
                    Birth = _birth ?? DateTime.UtcNow,
                    Race = _model.Race,
                    Description = _model.Description,
                    Id = DogId.Value,
                    IsGenderMale = _model.IsGenderMale,
                    Name = _model.Name,
                    WeightClass = _model.WeightClass,
                    ProfilePicture = _model.ProfilePicture
                });
        }
        else
        {
            id = await ApiClient.CreateDogAsync(_model);
        }
        if (!success)
        {
            success = id is not null;
        }

        var textSuccess = _isUpdate ? "opdateret" : "oprettet";
        var textFailure = _isUpdate ? "opdatere" : "oprette";
        if (success)
        {
            Snackbar.Add($"Din hund blev {textSuccess}!", Severity.Success);
            NavigationManager.GoBack(JSRuntime);
        }
        else
        {
            Snackbar.Add($"Kunne ikke {textFailure} din hund", Severity.Error);
        }
        _isCreatingUpdatingDog = false;
    }

    private async Task FetchExistingDog()
    {
        _loading = true;
        StateHasChanged();

        int id = DogId ?? -1;
        var dogDetailed = await ApiClient.GetDogDetailedAsync(id);
        _model = new()
            {
                Birth = dogDetailed.Birth,
                Race = dogDetailed.Race,
                Description = dogDetailed.Description,
                Name = dogDetailed.Name,
                IsGenderMale = dogDetailed.IsGenderMale,
                WeightClass = dogDetailed.WeightClass,
            };
        _birth = _model.Birth;
        _initialProfilePictureUrl = dogDetailed.ProfilePictureUrl;
        _loading = false;

    }
}
