@using ModelLib.ApiDTOs
@using ModelLib.ApiDTOs.Pagination
@using ModelLib.DTOs.CheckIns
@using RazorLib.Components.CheckIn
@using RazorLib.Components.ListViews
@using RazorLib.Interfaces
@using RazorLib.Models
@using static EntityLib.Entities.Enums
@inject IApiClient ApiClient


<ListViewScrollPagination TPaginationResult="PaginationResult<CheckInListDTO>"
    ItemGap="20" 
    Orientation="@ListViewOrientation.Horizontal"
    TItem="CheckInListDTO" 
    BuildListItemContent="_buildListItemContent"
    BuildSkeletonContent="_buildSkeletonContent"
    FetchFunction="_fetchFunction"
    UniqueItemKeyExtractor="(CheckInListDTO t) => t.Id"
    />


@code {

    [Parameter, EditorRequired]
    public int FacilityId { get; set; }

    [Parameter]
    public bool ShowOnlyCurrentlyCheckedIn { get; set; }

    private Func<CheckInListDTO, RenderFragment> _buildListItemContent;
    private Func<RenderFragment> _buildSkeletonContent;
    private Func<int, PaginationResult<CheckInListDTO>?, IList<CheckInListDTO>, Task<(PaginationResult<CheckInListDTO>, PaginationResult<CheckInListDTO>, IList<CheckInListDTO>)>> _fetchFunction;

    public CheckinsListView()
    {
        _buildListItemContent = (CheckInListDTO dto) =>@<CheckInCard CheckInDetails="dto"/>;
        _buildSkeletonContent = () =>@<CheckInCardSkeleton/>;
        _fetchFunction = async (int itemsPerPage, PaginationResult<CheckInListDTO>? previousPaginationResult, IList<CheckInListDTO> items) =>
        {
            var dto = new CheckInListDTOPaginationRequest
                {
                    PaginationRequest = new DateTimePaginationRequest
                    {
                        ItemsPerPage = itemsPerPage,
                        Page = previousPaginationResult?.CurrentPage + 1 ?? 0,
                        LastDate = items.LastOrDefault()?.CheckedInDate ?? DateTime.UtcNow.AddDays(1),
                        LastId = previousPaginationResult?.LastId ?? -1
                    },
                    PlaceId = FacilityId,
                    OnlyActiveCheckIns = ShowOnlyCurrentlyCheckedIn
                };
            var result = await ApiClient.GetCheckIns(dto);
            if (result is null)
            {
                return (new PaginationResult<CheckInListDTO>(), new PaginationResult<CheckInListDTO>(), new List<CheckInListDTO>());
            }
            return (result, result, result.Result);
        };
    }

}
