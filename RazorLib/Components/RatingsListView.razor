@using RazorLib.Components.Rating
@using RazorLib.Interfaces
@using RazorLib.Models
@using RazorLib.Components.ScrollPagination
@inject IApiClient ApiClient


<ScrollPagination OnPagination="(e) => FetchRatings()">
    @foreach (var rating in Ratings) {
        <Rating RatingDTO=@rating />
    }
    @if (_loading)
    {
        @for (int i = 0; i < _ratingsPerPage; i++)
        {
            <RatingSkeleton/>
        }
    }
</ScrollPagination>


@code {
    [Parameter]
    public int? MaxItems { get; set; }

    [Parameter]
    public int DogParkId { get; set; }

    private bool _loading;

    public List<RatingDTO> Ratings { get; set; }

    private int _page;
    private int _ratingsPerPage;
    private bool _hasNext;

    public RatingsListView()
    {
        _page = 0;
        _hasNext = true;
        _ratingsPerPage = 10;
        Ratings = new();
    }

    private async Task FetchRatings()
    {
        var hasLimitExceeded = MaxItems != null && Ratings.Count < MaxItems;
        if (_hasNext && !hasLimitExceeded)
        {
            _loading = true;
            _hasNext = false;
            var (paginationResult, ratings) = await ApiClient.GetDogParkRatings(DogParkId, _page, _ratingsPerPage);
            Ratings.AddRange(ratings);

            _page++;
            _hasNext = paginationResult.HasNext;
            _loading = false;
        }
    }
}
