@using ModelLib.DTOs.Posts;
@using ModelLib.DTOs.Reviews
@using RazorLib.Components.Instructors
@using RazorLib.Components.Places
@using RazorLib.Components.Users;
@using RazorLib.Interfaces;
@using RazorLib.Models
@using System.Globalization;
@using RazorLib.Utils;
@using static EntityLib.Entities.Enums;
@inject NavigationManager NavigationManager
@inherits UserContext
@inject IApiClient ApiClient
@inject ISnackbar snackbar


<MudPaper Style=@($"max-width:600px; width:100%; min-width:320px; " + Style)>
    <MudStack Class="px-5 pt-5 mb-2" Row="true" Justify="Justify.SpaceBetween" Style="flex-wrap:wrap;" Spacing="1">
        <Authenticated>
            <MudStack Justify="Justify.SpaceBetween" Row=true Style="width:100%;">

                <MudButton Class="py-0 pl-0" OnClick="() => NavigationManager.NavigateToUser(Post.UserId)">

                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">

                        @if (Post.UserImageUrl is not null)
                        {
                            <MudAvatar>
                                <MudImage Src="@Post.UserImageUrl" />
                            </MudAvatar>
                        }
                        else
                        {
                            <MudAvatar Color="Color.Primary">
                                @(Post.UserFirstName.First())@(Post.UserLastName.First())
                            </MudAvatar>
                        }

                        <MudStack AlignItems="AlignItems.Start" Spacing="0">
                            <MudText Align="Align.Left">@Post.UserFirstName @Post.UserLastName @(_userProfession is null ? "" : $"- {_userProfession}")</MudText>
                                <MudText Align=Align.Left Typo="Typo.subtitle2">@Post.DateTime.ToLocalTime().ToString("dddd, dd MMMM yyyy, HH:mm", CultureInfo.CurrentCulture)</MudText>
                            </MudStack>

                        </MudStack>
                    </MudButton>

                    @if (AuthenticatedUser != null && AuthenticatedUser.Id == Post.UserId)
                {
                    <MudMenu Icon="@Icons.Material.Filled.MoreHoriz">
                        <MudMenuItem Disabled=_loading Icon="@Icons.Material.Filled.Delete" OnClick="@OnDeletePost">Slet Opslag</MudMenuItem>
                    </MudMenu>
                }


            </MudStack>
        </Authenticated>
    </MudStack>

    <div class="px-5">

        @*Category area:*@
        @if (Post.Area is not null || Post.Category is not null)
        {
            <MudStack Class="mb-5" Row="true" Style="flex-wrap:wrap;" Spacing="2" AlignItems="AlignItems.Center">
                @if (Post.Category is not null)
                {
                    <MudPaper Elevation="2" @onclick="@(() => OnPostCategoryClicked(Post.Category.Value))" Class=@_pillClass Style="width:fit-content; height:fit-content">
                        <MudStack AlignItems="AlignItems.Center" Spacing="1" Row=true>
                            <MudIcon Icon=@EnumToTextConversion.PostCategoryToIcon(Post.Category.Value) Color=@EnumToTextConversion.PostCategoryToColor(Post.Category.Value) />
                            <MudText Color=@EnumToTextConversion.PostCategoryToColor(Post.Category.Value) Style="font-weight:bold;" Typo="Typo.subtitle2">@EnumToTextConversion.PostCategoryToString(Post.Category.Value)</MudText>
                        </MudStack>
                    </MudPaper>
                }
                else if (Post.Area is not null && !string.IsNullOrEmpty(Post.PlaceName))
                {
                    <MudPaper Elevation="2" @onclick="@(() => OnPostAreaClicked(Post.Area.Value))" Class=@_pillClass Style="width:fit-content; height:fit-content">
                        <MudText Typo="Typo.subtitle2">@EnumToTextConversion.PostAreaToString(Post.Area.Value)</MudText>
                    </MudPaper>
                    <MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt"></MudIcon>
                }

                @if (Post.PlaceId is not null && !string.IsNullOrEmpty(Post.PlaceName))
                {
                    @if (Post.Category is not null)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt"></MudIcon>
                    }
                    <PlaceAvatar Spacing=2 FacilityType=@Post.PlaceFacilityType.Value Id=@Post.PlaceId.Value Name=@Post.PlaceName ImageUrl=@Post.PlaceImageUrl />
                }
                else if (!HidePostArea && Post.Area is not null)
                {
                    <MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt"></MudIcon>
                    <MudPaper Elevation="2" @onclick="@(() => OnPostAreaClicked(Post.Area.Value))" Class=@_pillClass Style="width:fit-content; height:fit-content">
                        <MudText Typo="Typo.subtitle2">@EnumToTextConversion.PostAreaToString(Post.Area.Value)</MudText>
                    </MudPaper>
                }

                @if (Post.Category is not null && !HidePostArea && Post.Area is not null && !string.IsNullOrEmpty(Post.PlaceName))
                {
                    <MudText Typo="Typo.subtitle2">(@EnumToTextConversion.PostAreaToString(Post.Area.Value))</MudText>
                }
            </MudStack>

        }

        @*Body Area:*@
        @if (Post.Body is not null)
        {
            <TextFormatted Text="@Post.Body" />
        }
    </div>

    @*Media Area:*@
    @if (Post.MediaUrls is not null && Post.MediaUrls.Any())
    {
        <MudPaper Class="rounded-b-sm rounded-t-0" Elevation=0 Style="max-height:300px; width:100%; background-color:rgba(0,0,0,0.8);">
            <Gallery Urls=Post.MediaUrls></Gallery>
        </MudPaper>
    }

    @*Comments and likes area:*@
    <div class="px-5 pb-2 mt-2">
        @if (Post.Likes.Any() || Post.TotalComments > 0)
        {
            @if (Post.MediaUrls is null || !Post.MediaUrls.Any())
            {
                <MudDivider />
            }

            <MudStack Style="margin-top:12px;" Class="px-2" Row=true Justify="Justify.SpaceBetween">
                @if (Post.Likes.Any())
                {
                    <MudMenu FullWidth="true" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Style="justify-content:start; width:150px;">
                        <ActivatorContent>
                            <MudStack Row=true AlignItems="AlignItems.Center">
                                <MudIcon Size=Size.Small Icon=@Icons.Material.Outlined.ThumbUp />
                                <MudText>@Post.Likes.Count()</MudText>
                            </MudStack>
                        </ActivatorContent>
                        <ChildContent>
                            @foreach (var like in Post.Likes.Take(10))
                            {
                                <MudMenuItem OnClick="() => NavigationManager.NavigateToUser(like.UserId)"
                                             OnTouch="()=> NavigationManager.NavigateToUser(like.UserId)"><MudText Typo="Typo.subtitle2">@like.UserName</MudText></MudMenuItem>
                            }
                            @if (Post.Likes.Count() > 10)
                            {
                                <MudMenuItem Disabled="true"><MudText Typo="Typo.subtitle2">Og @(Post.Likes.Count() - 10) andre</MudText></MudMenuItem>
                            }
                        </ChildContent>
                    </MudMenu>
                }
                else
                {
                    <div style="width:1px;" />
                }

                @if (Post.TotalComments > 0)
                {
                    <MudStack Row=true AlignItems="AlignItems.Center">
                        <MudText>@(Post.TotalComments) Kommentarer</MudText>
                    </MudStack>
                }
                else
                {
                    <div style="width:1px;" />
                }
            </MudStack>
        }

        <MudDivider Class="mt-3" />
        <MudStack Row=true Justify="Justify.SpaceAround">
            <Authenticated>
                <MudButton Variant="Variant.Text" OnClick="@OnLike">
                    @if (_hasLikedPost)
                    {
                        <MudText>Fjern Pote</MudText>
                    }
                    else
                    {
                        <MudText>Giv Pote</MudText>
                    }
                </MudButton>
            </Authenticated>

            <Authenticated>
                <MudButton IconSize=Size.Small
                           StartIcon="@Icons.Material.Outlined.ModeComment"
                           Variant="Variant.Text"
                           OnClick="() => _showCreateComment = true">
                    <MudText>Kommenter</MudText>
                </MudButton>
            </Authenticated>
        </MudStack>

    </div>
    <CommentsListView OnCommentDeleted="OnCommentDeleted" OnCommentAdded=OnCommentAdded HideComments=@(Post.TotalComments == 0) ShowCreateComment="@_showCreateComment" PostId="@Post.Id" />
</MudPaper>

@code {

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public Action<int>? OnPostDeleted { get; set; }

    [Parameter]
    public PostDetailedDTO Post { get; set; }

    [Parameter]
    public bool HidePostArea { get; set; }

    private string? _userProfession { get; set; }

    [Parameter]
    public Func<PostCategory, Task>? OnPostCategoryClicked { get; set; }

    [Parameter]
    public Func<PostArea, Task>? OnPostAreaClicked { get; set; }

    private string _pillClass = "rounded-pill pa-3 mud-ripple card-clickable";

    private bool _hasLikedPost;

    private bool _loading;

    private bool _showCreateComment;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        OnPostCategoryClicked = OnPostCategoryClicked ?? new Func<PostCategory, Task>((PostCategory c) => Task.CompletedTask);
        OnPostAreaClicked = OnPostAreaClicked ?? new Func<PostArea, Task>((PostArea c) => Task.CompletedTask);

        _userProfession = GetUserProfessionText(Post.UserProfession);
    }

    private string? GetUserProfessionText(FacilityType? facilityType)
    {
        switch (facilityType)
        {
            case null: return null;
            case FacilityType.DogInstructor: return "Hundetræner";
            default: return facilityType.ToString();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (AuthenticatedUser is not null)
        {
            _hasLikedPost = Post.Likes.Select(l => l.UserId).Contains(AuthenticatedUser.Id);
            StateHasChanged();
        }
    }

    private async Task OnDeletePost()
    {
        _loading = true;
        var response = await ApiClient.DeletePost(Post.Id);
        if (response.IsSuccessStatusCode)
        {
            if (OnPostDeleted is not null)
            {
                OnPostDeleted(Post.Id);
            }
            snackbar.Add("Dit opslag blev slettet!", Severity.Success);
        }
        else
        {
            snackbar.Add("Kunne ikke slette dit opslag.", Severity.Error);
        }
        _loading = false;
    }

    private async Task OnLike()
    {
        var response = await ApiClient.LikePostAsync(Post.Id);
        if (!response.IsSuccessStatusCode)
        {
            return;
        }
        _hasLikedPost = !_hasLikedPost;

        @if (AuthenticatedUser is null)
        {
            return;
        }

        if (!_hasLikedPost) // negation to accomodate for the state before api call
        {
            Post.Likes.Remove(Post.Likes.First(p => p.UserId == AuthenticatedUser.Id));
        }
        else
        {
            Post.Likes.Add(new LikeDetailedDTO()
                {
                    UserId = AuthenticatedUser.Id,
                    UserName = AuthenticatedUser.FullName
                });
        }
        StateHasChanged();
    }

    private Task OnCommentAdded(CommentDetailedDTO comment)
    {
        Post.TotalComments += 1;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnCommentDeleted()
    {
        Post.TotalComments -= 1;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
