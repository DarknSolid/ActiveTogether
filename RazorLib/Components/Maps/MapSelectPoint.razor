@inherits BaseMap
@inject IPolylineFactory PolylineFactory




<MudButton Style=" height: fit-content;"
    Disabled="Disabled" 
    Color="Color.Primary" 
    EndIcon="@Icons.Filled.GpsFixed" 
    Variant="Variant.Outlined" 
    OnClick="() => _show = true">
    Vælg Lokation
</MudButton>


<MudOverlay Visible="_show" DarkBackground="true" Absolute="false">

    <div style="height: 80%;
                    width: 80%;
                    margin: auto;
                    position: relative;
                    max-width:600px;
                    min-width:350px;
                    min-height:600px;
                    top: 10%;">

        <div style="position:relative; height:80%;">
            <FisSst.BlazorMaps.Map CssClass="map-full-size" @ref="@_map" MapOptions="@_mapOptions" AfterRender="@(async () => await OnAfterInitAsync())" />
            <MapPointSelectAim />
        </div>

        <MudPaper Class="px-10 py-5">
            <MudStack>
                <MudButton Class="mt-5" OnClick="ConfirmLocation" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary">Vælg Lokation</MudButton>
            </MudStack>
        </MudPaper>

    </div>
</MudOverlay>

@code {

    [Parameter]
    public LatLng? InitialPosition { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter, EditorRequired]
    public Action<LatLng> OnLocationConfirmed { get; set; }

    private bool _show;

    public void ShowMap()
    {
        _show = true;
    }


    protected override async Task OnAfterInitAsync()
    {
        await base.OnAfterInitAsync();
        if (InitialPosition != null)
        {
            await _map.SetView(InitialPosition);
        }
    }

    private async Task ConfirmLocation()
    {
        OnLocationConfirmed(await _map.GetCenter());
        _show = false;
    }

}
