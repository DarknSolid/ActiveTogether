@using ModelLib.DTOs.Reviews
@using RazorLib.Components.Review
@using RazorLib.Interfaces
@using RazorLib.Models
@using RazorLib.Components.ScrollPagination
@using static EntityLib.Entities.Enums
@using static RazorLib.Components.ScrollPagination.ScrollPagination
@inject IApiClient ApiClient


<ScrollPagination Gap="20" Orientation="@PaginationOrientation.Vertical" OnPagination="(e) => FetchRatings()">
    @foreach (var review in Reviews) {
        <Review ReviewDTO=@review />
    }
    @if (_loading)
    {
        @for (int i = 0; i < _ratingsPerPage; i++)
        {
            <ReviewSkeleton/>
        }
    }
</ScrollPagination>


@code {
    [Parameter]
    public int? MaxItems { get; set; }

    [Parameter]
    public int RevieweeId { get; set; }

    [Parameter]
    public ReviewType ReviewType { get; set; }

    private bool _loading;

    public List<ReviewDetailedDTO> Reviews { get; set; }

    private int _page;
    private int _ratingsPerPage;
    private bool _hasNext;

    public ReviewsListView()
    {
        _page = 0;
        _hasNext = true;
        _ratingsPerPage = 10;
        Reviews = new();
    }

    private async Task FetchRatings()
    {
        var hasLimitExceeded = MaxItems != null && Reviews.Count < MaxItems;
        if (_hasNext && !hasLimitExceeded)
        {
            _loading = true;
            _hasNext = false;
            var result = await ApiClient.GetReviewsAsync(RevieweeId, ReviewType, _page, _ratingsPerPage);
            Reviews.AddRange(result.Reviews);

            _page++;
            _hasNext = result.PaginationResult.HasNext;
            _loading = false;
        }
    }
}
