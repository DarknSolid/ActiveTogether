@using ModelLib.ApiDTOs
@using ModelLib.ApiDTOs.Pagination
@using ModelLib.DTOs.Reviews
@using RazorLib.Components.ListViews
@using RazorLib.Components.Review
@using RazorLib.Interfaces
@using RazorLib.Models
@using static EntityLib.Entities.Enums
@inject IApiClient ApiClient


<ListViewScrollPagination ItemGap="20"
                          SetSearchResultTotalCount="@SetSearchResultTotalCount"
                          Orientation="@Orientation"
                          BuildListItemContent="_buildListItemContent"
                          BuildSkeletonContent="_buildSkeletonContent"
                          FetchFunction="_fetchFunction" 
                          UniqueItemKeyExtractor="(ReviewDetailedDTO r) => r.Id"/>



@code {

    [Parameter]
    public int RevieweeId { get; set; }

    [Parameter]
    public ListViewOrientation Orientation { get; set; }

    [Parameter]
    public Action<int> SetSearchResultTotalCount { get; set; }

    private Func<ReviewDetailedDTO, RenderFragment> _buildListItemContent;
    private Func<RenderFragment> _buildSkeletonContent;
    private Func<int, PaginationResult<ReviewDetailedDTO>?, IList<ReviewDetailedDTO>, Task<(PaginationResult<ReviewDetailedDTO>, PaginationResult<ReviewDetailedDTO>, IList<ReviewDetailedDTO>)>> _fetchFunction;

    public ReviewsListView()
    {
        _buildListItemContent = (ReviewDetailedDTO dto) =>@<Review ReviewDTO="dto" />;
        _buildSkeletonContent = () =>@<ReviewSkeleton />;
        _fetchFunction = async (int itemsPerPage, PaginationResult<ReviewDetailedDTO>? previousPaginationResult, IList<ReviewDetailedDTO> items) =>
        {
            var request = new ReviewsDTOPaginationRequest
                {
                    PaginationRequest = new DateTimePaginationRequest
                    {
                        ItemsPerPage = itemsPerPage,
                        Page = previousPaginationResult?.CurrentPage + 1 ?? 0,
                        LastDate = items.LastOrDefault()?.DateTime ?? DateTime.UtcNow.AddDays(1),
                        LastId = previousPaginationResult?.LastId ?? -1,
                    },
                    PlaceId = RevieweeId
                };

            var result = await ApiClient.GetReviewsAsync(request);
            return (result, result, result.Result);
        };
    }

}
