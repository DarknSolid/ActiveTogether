@using Microsoft.JSInterop
@using ModelLib.DTOs.CheckIns
@using RazorLib.Interfaces
@using RazorLib.Models
@using RazorLib.Utils
@implements IDisposable
@inject IStorageManager<CurrentlyCheckedInDTO> CheckInManager 
@inject ITopicBroker TopicBroker
@inject IJSRuntime JSRuntime


@if (_urrentlyCheckedInDTO != null)
{
    <MudPaper Style="@Style" onclick="@(() => OnClicked(_urrentlyCheckedInDTO.PlaceId))" Class="mud-theme-primary">
        <MudText Color="Color.Surface" Typo="Typo.body1">Checked in: </MudText>
        <MudText Color="Color.Surface" Typo="Typo.body2">Duration: @_duration</MudText>
        <MudText Color="Color.Surface" Typo="Typo.body2">Mood: @EnumToTextConversion.MoodToString(_urrentlyCheckedInDTO.Mood)</MudText>
    </MudPaper>
}

@code {

    [Parameter]
    public Action<int> OnClicked { get; set; }

    [Parameter]
    public string? Style { get; set; }

    private string _style = "";

    private CurrentlyCheckedInDTO? _urrentlyCheckedInDTO;

    private string _duration;

    public async Task OnChechInChanged()
    {
        await Fetch();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _style = Style ?? "";
        CheckInManager.Subscribe(Fetch);
        await Fetch();
    }

    public void Dispose()
    {
        CheckInManager.UnSubscribe(OnChechInChanged);
    }

    public async Task Fetch()
    {
        _urrentlyCheckedInDTO = await CheckInManager.Get();
        if (_urrentlyCheckedInDTO != null)
        {
            var (hours, minutes) = Utils.DateUtils.TimeInHoursMinutes(_urrentlyCheckedInDTO.CheckInDate, null);
            _duration = $"{hours}h {minutes} m";
        }
        StateHasChanged();
    }
}
