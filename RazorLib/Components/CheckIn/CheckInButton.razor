@using EntityLib.Entities
@using Microsoft.JSInterop
@using ModelLib.DTOs.Authentication;
@using ModelLib.DTOs.CheckIns
@using RazorLib.Interfaces
@using RazorLib.Models
@using static EntityLib.Entities.Enums
@inject IApiClient ApiClient
@inject IJSRuntime JS
@inject IStorageManager<CurrentlyCheckedInDTO> CheckedInStorageManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IStorageManager<UserDetailedDTO> UserManager

<Authenticated>
    <MudButton Disabled="@_disabled" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" Style="height:100%" OnClick="@(() => OnCheckInButtonPressed())">
        @if (CanCheckIn())
        {
            <MudText Typo="Typo.body1">CHECK IN</MudText>
        }
        else if (CanCheckOut())
        {
            <MudText Typo="Typo.body1">CHECK OUT</MudText>
        }
        else
        {
            <MudText Typo="Typo.body1">Checked In Elsewhere</MudText>
        }
    </MudButton>
</Authenticated>

@code {
    [Parameter]
    public int FacilityId { get; set; }

    [Parameter]
    public Action? OnCheckOut { get; set; }

    private bool _isLoggedIn;

    private Action _onCheckOut;

    private CurrentlyCheckedInDTO? _currentCheckInInfo { get; set; }

    private bool _disabled;

    public CheckInButton()
    {
        _onCheckOut = OnCheckOut ?? (() => { });
    }

    protected override async Task OnInitializedAsync()
    {
        _isLoggedIn = (await UserManager.Get()) is not null;
        if (_isLoggedIn)
        {
            _currentCheckInInfo = await ApiClient.GetCurrentCheckIn();
            await UpdateCheckInState(_currentCheckInInfo);
            await base.OnInitializedAsync();
        }
    }

    public bool CanCheckIn()
    {
        if (!_isLoggedIn)
        {
            return true;
        }

        if (_currentCheckInInfo == null)
        {
            return true;
        }
        else if (_currentCheckInInfo.PlaceId == FacilityId)
        {
            return false;
        }

        return false;
    }

    public bool CanCheckOut()
    {
        if (!_isLoggedIn)
        {
            return false;
        }

        if (_currentCheckInInfo != null)
        {
            return _currentCheckInInfo.PlaceId == FacilityId;
        }
        return false;
    }

    public async Task OnCheckInButtonPressed()
    {
        if (CanCheckIn())
        {

            var (didAccept2, selectedMood) = await DialogServiceExtender.ShowMoodListViewSelection(
                DialogService,
                ApiClient,
                "Select your mood",
                true,
                "Check In"
            );

            if (!didAccept2) return;

            var dto = new CheckInCreateDTO
                {
                    PlaceId = FacilityId,
                    Mood = selectedMood.FirstOrDefault(CheckInMood.None)
                };

            var result = await ApiClient.CheckIn(dto);
            if (result is null || result < 1)
            {
                Snackbar.Add("Check in failed", Severity.Error);
            }
            else
            {
                var newCheckInState = await ApiClient.GetCurrentCheckIn();
                await UpdateCheckInState(newCheckInState);
            }
        }
        else if (CanCheckOut())
        {
            var result = await ApiClient.CheckOut();
            if (result is null || result < 1)
            {
                Snackbar.Add("Checkout in failed", Severity.Error);
            }
            else
            {
                _onCheckOut();
                await UpdateCheckInState();
            }
        }
    }

    public async Task UpdateCheckInState(CurrentlyCheckedInDTO? dto = null)
    {

        if (dto == null)
        {
            await CheckedInStorageManager.Delete();
        }
        else
        {
            await CheckedInStorageManager.Set(dto);
        }

        _currentCheckInInfo = dto;
        _disabled = !CanCheckIn() && !CanCheckOut();
        StateHasChanged();
    }
}
