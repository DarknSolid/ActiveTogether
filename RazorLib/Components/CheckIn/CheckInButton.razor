@using Microsoft.JSInterop
@using ModelLib.DTOs.CheckIns
@using ModelLib.DTOs.Dogs
@using RazorLib.Components.Dogs
@using RazorLib.Extensions
@using RazorLib.Interfaces
@using static EntityLib.Entities.Enums
@inject IApiClient ApiClient
@inject IJSRuntime JS
@inject IStorageManager<CurrentlyCheckedInDTO> CheckedInStorageManager
@inject IDialogService DialogService

<MudButton Disabled="@_disabled" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" Style="height:100%" OnClick="@(() => OnCheckInButtonPressed())">
    @if (CanCheckIn())
    {
        <MudText Typo="Typo.body1">CHECK IN</MudText>
    }
    else if (CanCheckOut())
    {
        <MudText Typo="Typo.body1">CHECK OUT</MudText>
    }
    else
    {
        <MudText Typo="Typo.body1">Checked In Elsewhere</MudText>
    }
</MudButton>

@code {
    [Parameter]
    public int FacilityId { get; set; }

    [Parameter]
    public FacilityType FacilityType { get; set; }

    private CurrentlyCheckedInDTO? _currentCheckInInfo { get; set; }

    private bool _disabled = true;

    protected override async Task OnInitializedAsync()
    {
        _currentCheckInInfo = await ApiClient.GetCurrentCheckIn();
        await UpdateCheckInState(_currentCheckInInfo);
        await base.OnInitializedAsync();
    }

    public bool CanCheckIn()
    {
        if (_currentCheckInInfo == null)
        {
            return true;
        }
        else if (_currentCheckInInfo.FacilityId == FacilityId && _currentCheckInInfo.FacilityType == FacilityType)
        {
            return false;
        }

        return false;
    }

    public bool CanCheckOut()
    {
        if (_currentCheckInInfo != null)
        {
            return _currentCheckInInfo.FacilityId == FacilityId && _currentCheckInInfo.FacilityType == FacilityType;
        }
        return false;
    }

    public async Task OnCheckInButtonPressed()
    {
        if (CanCheckIn())
        {
            // show select dog dialogue

            var (dogsToCheckIn, didCancel) = await OpenDogSelectionDialogue();
            if (didCancel) return;
            var dto = new CheckInCreateDTO { FacilityId = FacilityId, FacilityType = FacilityType, DogsToCheckIn = dogsToCheckIn };
            var result = await ApiClient.CheckIn(dto);
            if (result == -1)
            {
                // something went wrong
            }
            var newCheckInState = await ApiClient.GetCurrentCheckIn();
            await UpdateCheckInState(newCheckInState);
        }
        else if (CanCheckOut())
        {
            var result = await ApiClient.CheckOut();
            if (result == -1)
            {
                // something went wrong
            }
            await UpdateCheckInState();
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns>The list of dog ids and if the selection menu was cancelled</returns>
    private async Task<(List<int>, bool)> OpenDogSelectionDialogue()
    {
        Func<DogListDTO, RenderFragment, RenderFragment> dogCardBuilder = ((DogListDTO dto, RenderFragment childContent) => @<DogCard Dog="dto" ChildContent="childContent" />);

        var dialog = DialogueServiceExtenstions.ShowListViewSelection<ItemSelectionDialogue<DogListDTO>, DogListDTO>(
            DialogService,
            "Which dogs did you bring?",
            (async () => await ApiClient.GetMyDogsAsync()),
            dogCardBuilder,
            ((DogListDTO dto) => dto.Id)
        );

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            return ((List<int>)result.Data, false);
        }
        return (new List<int>(), true);
    }

    public async Task UpdateCheckInState(CurrentlyCheckedInDTO? dto = null)
    {
        if (dto == null)
        {
            await CheckedInStorageManager.DeleteCheckIn();
        }
        else
        {
            await CheckedInStorageManager.SetCurrentCheckIn(dto);
        }

        _currentCheckInInfo = dto;
        _disabled = !CanCheckIn() && !CanCheckOut();
        StateHasChanged();
    }
        }
