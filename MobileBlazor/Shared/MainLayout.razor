@using RazorLib.Components
@using RazorLib.Components.CheckIn
@using RazorLib.Components.CustomMudMenus
@using RazorLib.Components.RadialMenu
@using RazorLib.Models
@using static EntityLib.Entities.Enums
@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<MudThemeProvider Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0" Color="@Color.Primary" ToolBarClass="d-flex justify-space-between">
        @if (!_isLoginMenu)
        {
            @if (_canGoBack)
            {

                <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Color="Color.Inherit" OnClick="@((e) => OnBackButtonPressed())" />
            }
            else
            {
                <div style="min-width:56px;"></div>
            }

            <MudText Typo="Typo.h5">@_currentPageTitle</MudText>

            <div class="mr-2" style="padding-top:8px;">
                <CustomMudMenu StartIcon="@Icons.Outlined.Notifications"
                           Color="Color.Inherit"
                           ShowBadge="true"
                           BadgeContent="5"
                           BadgeColor="Color.Error">
                    <MudContainer Style="height: 300px;width:200px; overflow-y:auto; background-color: var(--mud-palette-background)">
                        <MudText Typo="Typo.h6">Notifications:</MudText>
                    </MudContainer>
                </CustomMudMenu>
            </div>
        }
        else
        {

            <MudText Style="text-align:center; width:100%;" Typo="Typo.h5">@_currentPageTitle</MudText>

        }

    </MudAppBar>

    <MudDrawer Anchor="@Anchor.Right" @bind-Open="_isDrawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Menu</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>

    <MudMainContent Style="@_mainContentStyle">

        <MudContainer MaxWidth="MaxWidth.Large" Class="px-0" Style="height: 100%; overflow-y: auto; position:relative;">
            @Body
        </MudContainer>
    </MudMainContent>

    <MudOverlay Visible="_showMenuWheel" DarkBackground="true" Absolute="true" AutoClose="false">
        <RadialMenu OnClose="ToggleWheelMenu" OnFacilitySelected="SetSelectedFacilityType" />
    </MudOverlay>

    @if (!_isLoginMenu)
    {
        @*z-index 1 is to allow MudSelect to overlay the nav bar*@
        <MudAppBar Elevation="0" Bottom=true Style="min-height: 65px; background-color: var(--mud-palette-background-grey); z-index: 1;">

            <CheckInInfoCard Style="
                                padding: 15px;
                                bottom: 50px;
                                position: absolute;
                                right: 50%;
                                transform: translateX(50%);"
                         OnClicked="(int id) => navigationManager.NavigateToDogParkDetails(id)" />
            <div class="d-flex justify-content-between" style="width:100%;">
                <ButtonIconText IsSelected="@(_selectedMenu == MenuButton.Discover)"
                            Icon="@Icons.Outlined.Explore"
                            SelectedIcon="@Icons.Filled.Explore"
                            Text="Discover"
                            OnClick="@((e) => OnDiscoverPressed())"
                            Class="menu-text-button"
                            SelectedClass="menu-text-button-selected" />
                <ButtonIconText IsSelected="@(_selectedMenu == MenuButton.Feed)"
                            Icon="@Icons.Outlined.ChatBubbleOutline"
                            SelectedIcon="@Icons.Filled.ChatBubble"
                            Text="Feed"
                            OnClick="@((e) => MenuButtonPressed(MenuButton.Feed, RoutingConstants.FEED))"
                            Class="menu-text-button"
                            SelectedClass="menu-text-button-selected" />
                <ButtonIconText IsSelected="@(_isDrawerOpen)"
                            Icon="@Icons.Outlined.BlurCircular"
                            SelectedIcon="@Icons.Filled.BlurCircular"
                            Text="Navigate" OnClick="@((e) => ToggleWheelMenu())"
                            Size="Size.Large"
                            Class="menu-text-button"
                            SelectedClass="menu-text-button-selected" />
                <ButtonIconText IsSelected="@(_selectedMenu == MenuButton.Favorites)"
                            Icon="@Icons.Outlined.FavoriteBorder"
                            SelectedIcon="@Icons.Filled.Favorite"
                            Text="Favorites"
                            OnClick="@((e) => MenuButtonPressed(MenuButton.Favorites, RoutingConstants.FAVORITES))"
                            Class="menu-text-button"
                            SelectedClass="menu-text-button-selected" />
                <ButtonIconText IsSelected="_isDrawerOpen"
                            Icon="@Icons.Filled.Menu"
                            SelectedIcon="@Icons.Filled.MenuOpen"
                            Text="Menu"
                            OnClick="@((e) => DrawerToggle())"
                            Class="menu-text-button"
                            SelectedClass="menu-text-button-selected" />
            </div>

        </MudAppBar>
    }
</MudLayout>

@code {

    private enum MenuButton
    {
        Discover,
        Feed,
        Favorites,
        None
    }

    private string _mainContentStyle;
    private string _originalMainContentStyle = @"
                    padding-top:calc(var(--mud-appbar-height) - var(--mud-appbar-height)/8);
                    position: relative;";

    private MenuButton _selectedMenu;
    private PlaceType _selectedFacilityType;

    private MudTheme _theme;

    private FacilityTypeThemes _facilityTypeThemes;

    private string _currentPageTitle = "Login";

    private bool _isDrawerOpen = false;
    private bool _canGoBack = false;
    private bool _showMenuWheel = false;
    private bool _isNotificationsOpen = false;
    private bool _isLoginMenu = true;

    public MainLayout()
    {
        _selectedMenu = MenuButton.Discover;
        _selectedFacilityType = PlaceType.DogPark;
        _facilityTypeThemes = new();
        _theme = _facilityTypeThemes.GetTheme(_selectedFacilityType);
    }

    private void SetSelectedFacilityType(PlaceType facilityType)
    {
        _selectedFacilityType = facilityType;
        _theme = _facilityTypeThemes.GetTheme(facilityType);
        switch (_selectedMenu)
        {
            case MenuButton.Discover:
                navigationManager.NavigateToDiscover(_selectedFacilityType);
                break;
            case MenuButton.Feed:
                break;
            case MenuButton.Favorites:
                break;
        }
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        // Subscribe to the event
        navigationManager.LocationChanged += UrlLocationChanged;
        UpdateOnUriChanged(navigationManager.Uri);
        base.OnInitialized();
    }

    private void DrawerToggle()
    {
        _isDrawerOpen = !_isDrawerOpen;
    }

    private void ToggleWheelMenu()
    {
        _showMenuWheel = !_showMenuWheel;
        StateHasChanged();
    }

    private void OnBackButtonPressed()
    {
        navigationManager.GoBack(jsRuntime);
    }

    private void MenuButtonPressed(MenuButton menuButton, string route)
    {
        SetSelectedMenuButton(menuButton);
        StateHasChanged();
        navigationManager.NavigateTo(route);
    }

    private void OnDiscoverPressed()
    {
        SetSelectedMenuButton(MenuButton.Discover);
        StateHasChanged();
        navigationManager.NavigateToDiscover(_selectedFacilityType);
    }

    private void SetSelectedMenuButton(MenuButton selectedMenuButton)
    {
        _showMenuWheel = false;
        _selectedMenu = selectedMenuButton;
    }


    private void UrlLocationChanged(object sender, LocationChangedEventArgs e)
    {
        UpdateOnUriChanged(e.Location);
    }

    private void UpdateOnUriChanged(string uri)
    {
        var currentRoutingConstantsPage = uri
            .Replace("https://0.0.0.0/", "")
            .Split("/")
            .FirstOrDefault("");

        //assume the page height - the height of the bottom nav bar:
        _mainContentStyle = _originalMainContentStyle + "height:calc(100% - var(--mud-appbar-height));";

        if (currentRoutingConstantsPage != string.Empty)
        {
            currentRoutingConstantsPage += "/";
        }
        _isLoginMenu = false;
        _canGoBack = false;
        switch (currentRoutingConstantsPage)
        {
            case RoutingConstants.DISCOVER:
                _currentPageTitle = "Discover";
                _selectedMenu = MenuButton.Discover;
                break;
            case RoutingConstants.FEED:
                _currentPageTitle = "Feed";
                _selectedMenu = MenuButton.Feed;
                break;
            case RoutingConstants.FAVORITES:
                _currentPageTitle = "Favorites";
                _selectedMenu = MenuButton.Favorites;
                break;
            case RoutingConstants.LOGIN:
            case "":
                _currentPageTitle = "Login";
                _isLoginMenu = true;
                // take into account that there is no bottom nav bar:
                _mainContentStyle = _originalMainContentStyle + "height: 100%;";
                break;
            default:
                _canGoBack = true;
                _selectedMenu = MenuButton.None;
                _currentPageTitle = PrettifyRoutingEndpoint(currentRoutingConstantsPage.Split("/").FirstOrDefault(""));
                break;
        }

        StateHasChanged();
    }

    private string PrettifyRoutingEndpoint(string s)
    {
        var splitted = s.Split("-")
        .Select(s => s.Substring(0, 1).ToUpper() + s.Substring(1).ToLower());

        return string.Join(' ', splitted);
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        navigationManager.LocationChanged -= UrlLocationChanged;
    }
}
